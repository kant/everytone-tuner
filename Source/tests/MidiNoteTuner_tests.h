/*
  ==============================================================================

    MidiNoteTuner_tests.h
    Created: 14 Dec 2021 12:27:55pm
    Author:  Vincenzo

  ==============================================================================
*/

#pragma once
#include "TestsCommon.h"
#include "../MidiNoteTuner.h"

class MidiNoteTuner_Test : public MultimapperUnitTest
{
private:

    void test_tuner(MidiNoteTuner& tuner, int startChannelIndex, int endChannelIndex, const int* expectedCoarseNotes, const int* expectedPitchbends, juce::String testName="")
    {
        for (int ch = startChannelIndex; ch < endChannelIndex; ch++)
        {
            int indexOffset = (ch - startChannelIndex) * 128;
            for (int note = 0; note < 128; note++)
            {
                int index = indexOffset + note;

                auto pitch = tuner.getMidiPitch(ch + 1, note);
                expect_exact(true, pitch.mapped, "pitch.mapped"); // probably should make this testable

                auto chStr = juce::String(ch + 1);
                auto noteStr = juce::String(note);
                auto indexStr = juce::String(index);
                auto detail = "[" + indexStr + "] " + "(" + chStr + ", " + noteStr + ")";
                expect_exact(expectedCoarseNotes[index], pitch.coarse, testName + "pitch.coarse at " + detail);
                expect_exact(expectedPitchbends[index], pitch.pitchbend, testName + "pitch.pitchbend at " + detail);
            }
        }
    }

public:

    struct GetAndSetParams
    {
        int startChannel = 0;
        int endChannel = 16;

        Tuning* tuningSource;
        Tuning* tuningTarget;
        TuningTableMap* mapping;

        int pitchbendRange = 4;
        int altPitchbendRange = 2;

        const int* expectedCoarseNotes = nullptr;

        const int* expectedPitchbends = nullptr;
        const int* expectedAltPitchbends = nullptr;
        const int* expectedMpeDefaultPitchbends = nullptr; // MPE default pitchbend range is 48 semitones
    };

    MidiNoteTuner_Test() : MultimapperUnitTest("MidiNoteTuner") {};

    void runTest() override
    {
        defaultTuningTest();
        ode22Test();
        ode31Test();
    }

private:

    void doTesting(juce::String testName, GetAndSetParams params)
    {
        auto tuningSource = std::make_shared<Tuning>(*params.tuningSource);
        auto tuningTarget = std::make_shared<Tuning>(*params.tuningTarget);
        auto mapping = std::make_shared<TuningTableMap>(*params.mapping);

        auto tuner = MidiNoteTuner(tuningSource, tuningTarget, mapping, params.pitchbendRange);

        beginTest(testName + " Getters");

        expect_pointers(static_cast<const Tuning*>(tuningSource.get()), tuner.tuningSource(), "tuningSource");
        expect_pointers(static_cast<const Tuning*>(tuningTarget.get()), tuner.tuningTarget(), "tuningTarget");
        expect_pointers(static_cast<const TuningTableMap*>(mapping.get()), tuner.mapping(), "mapping");
        expect_exact(params.pitchbendRange, tuner.getPitchbendMax(), "pitchbendRange");

        beginTest(testName + " Setters");
        tuner.setPitchbendRange(params.altPitchbendRange);
        expect_exact(params.altPitchbendRange, tuner.getPitchbendMax(), "pitchbendRange");

        beginTest(testName + " Tuning");

        tuner.setPitchbendRange(params.pitchbendRange);
        test_tuner(tuner, params.startChannel, params.endChannel, params.expectedCoarseNotes, params.expectedPitchbends);

        tuner.setPitchbendRange(params.altPitchbendRange);
        test_tuner(tuner, params.startChannel, params.endChannel, params.expectedCoarseNotes, params.expectedAltPitchbends, "range= " + juce::String(params.altPitchbendRange) + " ");
        
        tuner.setPitchbendRange(48);
        test_tuner(tuner, params.startChannel, params.endChannel, params.expectedCoarseNotes, params.expectedMpeDefaultPitchbends, "range=48 ");

    }

public:

    void defaultTuningTest()
    {
        auto stdTuning = Tuning::StandardTuning();
        auto stdMapping = TuningTableMap::StandardMapping();


        const int expectedCoarseNotes[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127 };
        const int expectedBends[] = {};

        GetAndSetParams params =
        {
            2, 5, &stdTuning, &stdTuning, &stdMapping, 2, 7,
            expectedCoarseNotes,
            expectedBends,
            expectedBends,
            expectedBends
        };

        doTesting("Default", params);
    }

    void ode22Test()
    {
        auto stdTuning = Tuning::StandardTuning();

        Tuning::CentsDefinition ode22def(22.0);
        int ch = 4;
        int note = 0;
        ode22def.reference = { note, ch, 261.6255653 };
        auto ode22atCh4Note0 = Tuning(ode22def);

        auto mapping = TuningTableMap::CreateLinearMidiMapping(note, ch);

        //auto mapping = MultichannelMap::CreatePeriodicMapping(22, ode22def.reference.rootMidiNote, ode22def.reference.rootMidiChannel);

        const int expectedCoarseNotes[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 127, 127, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        const int expectedBends[] = { 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 7447, 9309, 7075, 8937, 6703, 8564, 6330, 8192, 10054, 7820, 9681, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192 };

        const int expectedAltBends[] = { 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 6703, 10426, 5958, 9681, 5213, 8937, 4468, 8192, 11916, 7447, 11171, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192 };
        const int expectedMpeDefaultBends[] = { 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8161, 8239, 8145, 8223, 8130, 8208, 8114, 8192, 8270, 8176, 8254, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192 };

        GetAndSetParams params =
        {
            2, 5, &stdTuning, &ode22atCh4Note0, &mapping,
            4,
            2,
            expectedCoarseNotes,
            expectedBends,
            expectedAltBends,
            expectedMpeDefaultBends
        };

        doTesting("std -> 22edo", params);
    }

    void ode31Test()
    {
        auto stdTuning = Tuning::StandardTuning();

        Tuning::CentsDefinition ode31def(31.0);
        ode31def.reference = { 5, 23, 440 };
        auto ode31atCh5Note23 = Tuning(ode31def);

        auto mapping = MultichannelMap::CreatePeriodicMapping(31, ode31def.reference.rootMidiNote, ode31def.reference.rootMidiChannel);

        const int expectedCoarseNotes[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 40, 40, 40, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 45, 45, 45, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 51, 51, 52, 52, 52, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 57, 57, 57, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 62, 62, 62, 63, 63, 64, 64, 64, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 69, 69, 69, 70, 70, 71, 71, 71, 72, 72, 72, 73, 73, 74, 74, 74, 75, 75, 76, 76, 76, 77, 77, 78, 78, 78, 79, 79, 79, 80, 80, 81, 81, 81, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 86, 86, 86, 87, 87, 88, 88, 88, 89, 89, 90, 90, 90, 91, 91, 91, 92, 92, 93, 93, 93, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 98, 98, 98, 99, 99, 100, 100, 100, 101, 101, 102, 102, 102, 103, 103, 103, 104, 104, 105, 105, 105, 106, 106, 107, 107, 107, 108, 108, 108, 109, 109, 110, 110, 110, 111, 111, 112, 112, 112, 113, 113, 114, 114, 114, 115, 115, 115, 116, 116, 117, 117, 117, 118, 118, 119, 119, 119, 120, 120, 120, 121, 121, 122, 122, 122, 123, 123, 124, 124, 124, 125, 125, 126, 126, 126, 127, 127, 127, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        const int expectedBends[] = {};

        const int expectedAltBends[] = {};
        const int expectedMpeDefaultBends[] = {};

        GetAndSetParams params =
        {
            2, 6, &stdTuning, &ode31atCh5Note23, &mapping,
            4,
            2,
            expectedCoarseNotes,
            expectedBends,
            expectedAltBends,
            expectedMpeDefaultBends
        };

        doTesting("std -> 31edo", params);
    }

};